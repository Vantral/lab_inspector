Despite the abundance of plagiarism detecting systems working with source code, there are few programs able to work with short pieces of code, such as basic level homework.
<Despite PRP><the AT0><abundance NN1><of PRF><plagiarism NN1><detecting VVG><systems NN2><working VVG><with PRP><source NN1><code NN1><, PUN><there EX0><are VBB><few DT0><programs NN2><able AJ0><to TO0><work VVI><with PRP><short AJ0><pieces NN2><of PRF><code NN1><, PUN><such DT0><as PRP><basic AJ0><level NN1><homework NN1><. SENT>@
The goal of the paper is to describe the creation of a system able to find cases of plagiarism in Linguistic students' programming assignments.
<The AT0><goal NN1><of PRF><the AT0><paper NN1><is VBZ><to TO0><describe VVI><the AT0><creation NN1><of PRF><a AT0><system NN1><able AJ0><to TO0><find VVI><cases NN2><of PRF><plagiarism NN1><in PRP><Linguistic AJ0><students NN2><' POS><programming NN1><assignments NN2><. SENT>@
Some standard changes are often made to obscure a case of plagiarism making the works' source code visually unsimilar, so the main concept of the program is to unify all the pieces of code before the comparison.
<Some DT0><standard AJ0><changes NN2><are VBB><often AV0><made VVN><to TO0><obscure VVI><a AT0><case NN1><of PRF><plagiarism NN1><making VVG><the AT0><works NN0><' POS><source NN1><code NN1><visually AV0><unsimilar AJ0><, PUN><so AV0><the AT0><main AJ0><concept NN1><of PRF><the AT0><program NN1><is VBZ><to TO0><unify VVI><all DT0><the AT0><pieces NN2><of PRF><code NN1><before PRP><the AT0><comparison NN1><. SENT>@
The work includes the following stages : the list of plagiarized assignments' features is compiled, the methods of comparison of the works are chosen, the structure of the program is worked out.
<The AT0><work NN1><includes VVZ><the AT0><following AJ0><stages NN2><: PUN><the AT0><list NN1><of PRF><plagiarized VVN><assignments NN2><' POS><features NN2><is VBZ><compiled VVN><, PUN><the AT0><methods NN2><of PRF><comparison NN1><of PRF><the AT0><works NN0><are VBB><chosen VVN><, PUN><the AT0><structure NN1><of PRF><the AT0><program NN1><is VBZ><worked VVN><out AVP><. SENT>@
In spite of several security vulnerabilities found, the program has demonstrated a sufficient level of efficiency during the testing.
<In PRP><spite NN1><of PRF><several DT0><security NN1><vulnerabilities NN2><found VVN><, PUN><the AT0><program NN1><has VHZ><demonstrated VVN><a AT0><sufficient AJ0><level NN1><of PRF><efficiency NN1><during PRP><the AT0><testing NN1><. SENT>@
The testing also shows that the results may be affected, for instance, by non-standart renaming of variables, but these vulnerabilities are too specific to be often used by students to dissemble cases of plagiarism.
<The AT0><testing NN1><also AV0><shows VVZ><that CJT><the AT0><results NN2><may VM0><be VBI><affected VVN><, PUN><for PRP><instance NN1><, PUN><by PRP><non-standart NP0><renaming NN1><of PRF><variables NN2><, PUN><but CJC><these DT0><vulnerabilities NN2><are VBB><too AV0><specific AJ0><to TO0><be VBI><often AV0><used VVN><by PRP><students NN2><to TO0><dissemble VVI><cases NN2><of PRF><plagiarism NN1><. SENT>@
However, in the last section of the paper the ways of elimination of the vulnerabilities are proposed.
<However AV0><, PUN><in PRP><the AT0><last ORD><section NN1><of PRF><the AT0><paper NN1><the AT0><ways NN2><of PRF><elimination NN1><of PRF><the AT0><vulnerabilities NN2><are VBB><proposed AJ0><. SENT>@
